[
    {
        "id": 1,
        "title": "조건적 마크업",
        "category": "Today I Learned",
        "date": "2019. 6. 14. Fri.",
        "hash": [ "React" ],
        "content": [
            "HTML태그를 조건적으로 짜고싶다면, 아래와 같이 {-? :-} 문을 이용할 수 있다. {-if-}는 jsx에서 사용이 안되는 것 같았다.",
            {
                "type": "code",
                "content" : "item.url\n   ? <a href={item.url} target='blank' className='btn-more'>새창</a>\n   : <Link to={/lab/${item.slug}} className='btn-more'>이동</Link>;"
            }
        ]
    },
    {
        "id": 2,
        "title": "조건적 클래스네임",
        "category": "Today I Learned",
        "date": "2019. 6. 14. Fri.",
        "hash": [ "React" ],
        "content": [
            "HTML태그에 조건적으로 클래스네임을 주고싶다면, 아래와 같이 {-? :-} 문을 이용할 수 있다.",
            {
                "type" : "code",
                "content" : "<div className={'item' + (isSelected ? ' selected' : '') }>"
            },
            {
                "type" : "code",
                "content" : "<div className={'item' + (key === 0 ? ' selected' : '') }>"
            }
        ]
    },
    {
        "id": 3,
        "title": "이미지파일 불러오기",
        "category": "Today I Learned",
        "date": "2019. 6. 15. Sat.",
        "hash": [ "React" ],
        "content": [
            "리액트 내에서 이미지 (또는 CSS파일) 등을 불러올 때, {-import-}로 불러와야 한다.",
            {
                "type" : "code",
                "content" : "import ImgUrl from '../../images/image.png';"
            }
        ]
    },
    {
        "id": 4,
        "title": "this.props.history가 undefined일 때.",
        "category": "Today I Learned",
        "date": "2019. 6. 16. Sun.",
        "hash": [ "React" ],
        "content": [
            "{-this.props.history-}는{-<Route>-}안에 있어야 불러와진다. 일반적인 컴포넌트는 {-<Header history='this.props.history' />-} 이렇게 사용하면 Header 컴포넌트 안에서 {-this.props.history-}를 사용할 수 있게 된다."
        ]
    },
    {
        "id": 5,
        "title": "Link와 History에 관하여",
        "category": "Today I Learned",
        "date": "2019. 6. 18. Tue.",
        "hash": [ "React" ],
        "content": [
            "어제 작성했던 work페이지의 Link태그에서 to 를 빼고 onClick 이벤트로 로딩화면을 구현했었는데, 잘 작동되는가 싶더니, 뒤로가기를 눌렀을 때 /work 페이지가 두번 history내역에 남아있는 것이었다.",
            "즉, detail페이지에서 뒤로가면 work페이지로. 다시한번 뒤로가면 Home으로 가야하는데 그대로 work페이지에 머물러 있고, 한번 더 뒤로가기를 해야 Home으로 가지는 것이었다. 문제를 찾다가 Link 태그에 문제가 있다는 것을 발견했다.",
            "아마도 to가 없이 생성된 Link는 onClick으로 페이지 전환 되기 전에 자기 자신인 work페이지를 history에 한번 더 등록해서 history상 work페이지가 두번 push된 것으로 보여진다. 그래서 Link태그를 Button으로 바꿔서 해보니까 잘 된다."
        ]
    },
    {
        "title": "Wheel 이벤트 전파 막기!",
        "category": "Scripts",
        "date": "2019. 6. 18. Tue.",
        "hash": [ "Javascript" ],
        "content": [
            "예전부터 window객체의 wheel 이벤트에 대해 {-preventDefault()-}가 적용되지 않는 문제를 겪었다. 오늘 답을 찾았다. 함수 다음 인자로 {-{passive: false}-} 를 주는 것이다. 아래 코드로 정리해보았다.",
            {
                "type": "code",
                "content": "window.addEventListener( 'wheel', function(event) {\n   event.preventDefault();\n}, {passive: false});"
            }
        ]
    },
    {
        "title": "Environment Variables for React",
        "category": "Today I Learned",
        "date": "2019. 7. 3. Wed.",
        "hash": [ "Javascript", "React", "Dotenv" ],
        "content": [
            "기본적으로 {b-Create-React-App-b}을 사용했다면, 굳이 Dotenv를 설치하지 않아도 된다는 것을 알아냈다. 그리고 .env파일 변수 이름 앞에는 반드시 {-REACT_APP_-}이라는 프리픽스를 붙여야 한다."
        ] 
    },
    {
        "title": "숫자 앞에 0 붙이기",
        "category": "Today I Learned",
        "date": "2019. 7. 19. Fri.",
        "hash": [ "Javascript" ],
        "content": [
            "{-n-}은 숫자. {-width-}는 자리 수를 의미한다.",
            {
                "type": "code",
                "content": "const pad = (n, width) => {\n   n = n + '';\n   return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;\n}"
            }
        ]
    },
    {
        "title": "IOS Form CSS",
        "category": "Today I Learned",
        "date": "2019. 7. 19. Fri.",
        "hash": [ "CSS" ],
        "content": [
            "Room311 웹앱을 개발하는 과정에서 Submit버튼에 대한 CSS가 자꾸 적용이 되지 않아서 답답했었는데 찾아보니, iOS에서 기본 내장스타일이 우선 적용되는 이슈가 있었다. 이 경우, CSS RESET 단계에 아래 코드를 추가해주면 된다.",
            {
                "type": "code",
                "content": "input[type=submit] {-webkit-appearance:none;}"
            }
        ]
    },
    {
        "title": "Element.animate()",
        "category": "Today I Learned",
        "date": "2019. 7. 21. Sun.",
        "hash": [ "Javascript" ],
        "content": [
            "포트폴리오를 진행하면서 ES6 method중 {-Element.animate()-} method를 사용했었는데, 크로스브라우징 점검 과정에서 {b-Safari, Chrome for iOS, ie-b} 등 많은 브라우저에서 지원되지 않는 다는 것을 발견하고 모두 다른 방법으로 수정하였다. 쓰면 안되는 method였다..."
        ]
    },
    {
        "title": "더블클릭 확대 방지",
        "category": "Today I Learned",
        "date": "2019. 7. 23. Tue.",
        "hash": [ "Javascript" ],
        "content": [
            "버튼을 많이 누르게 되는 앱에는 꼭 필요한 기능이다.",
            {
                "type": "code",
                "content": "/* for HTML head */\n<meta name='viewport' content='width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no'>;"
            },
            {
                "type": "code",
                "content": "/* for Javascript */\nvar lastTouchEnd = 0;\ndocument.documentElement.addEventListener('touchend', function (event) {\n   var now = (new Date()).getTime();\n   if (now - lastTouchEnd <= 300) {\n      event.preventDefault();\n   }\n   lastTouchEnd = now;\n}, false);"
            }
        ]
    }
]